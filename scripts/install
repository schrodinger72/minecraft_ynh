#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
#ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
server=$YNH_APP_ARG_SERVER
version=$YNH_APP_ARG_VERSION
ram=$YNH_APP_ARG_RAM
port=$YNH_APP_ARG_PORT
op=$YNH_APP_ARG_OP
eula=$YNH_APP_ARG_EULA

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/home/yunohost.app/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# FIND AND OPEN A PORT
#=================================================

# Test and open default port
portmc=$(ynh_find_port --port=$port)
yunohost firewall allow --no-upnp TCP $portmc 2>&1
ynh_app_setting_set --app=$app --key=portmc --value=$portmc

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_print_info --message="Installing dependencies..."

### `ynh_install_app_dependencies` allows you to add any "apt" dependencies to the package.
### Those deb packages will be installed as dependencies of this package.
### If you're not using this helper:
###		- Remove the section "REMOVE DEPENDENCIES" in the remove script
###		- As well as the section "REINSTALL DEPENDENCIES" in the restore script
###		- And the section "UPGRADE DEPENDENCIES" in the upgrade script

ynh_install_app_dependencies openjdk-11-jre-headless

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set --app=$app --key=final_path --value=$final_path

# vanilla has
if [ $server == "vanilla" ]; then
	ynh_setup_source --dest_dir="$final_path" --source_id="$server/$version"
elif [ $server == "fabric" ]; then
	ynh_setup_source --dest_dir="$final_path" --source_id="$server/$server"
	java -jar $final_path/fabric-installer-0.6.1.51.jar server -dir $final_path -mcversion $version -downloadMinecraft
	if [ $? -ne 0 ]; then
		ynh_die "Fabric unable to download this version (not supported?)"
  fi
	ynh_replace_string --match_string="server.jar" --replace_string="fabric-server-launch.jar" --target_file="../conf/systemd.service"
fi

#=================================================
# MODIFY A CONFIG FILE
#=================================================

ynh_replace_string --match_string="__USER__" --replace_string="$app" --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__RAM__" --replace_string="$ram" --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__PATH__" --replace_string="$final_path" --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__OP__" --replace_string="$op" --target_file="../conf/ops.txt"
ynh_replace_string --match_string="__PORT__" --replace_string="$portmc" --target_file="../conf/server.properties"
ynh_replace_string --match_string="__EULA__" --replace_string="$eula" --target_file="../conf/eula.txt"

#=================================================
# SETUP SYSTEMD
#=================================================

ynh_add_systemd_config
systemctl enable $app.service

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
cp -a ../conf/eula.txt $final_path/eula.txt
cp -a ../conf/server.properties $final_path/server.properties
cp -a ../conf/ops.txt $final_path/ops.txt
chown -R $app $final_path

# Reload services
systemctl start $app.service
